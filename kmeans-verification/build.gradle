plugins {
    // benchmark plugins
    id "me.champeau.gradle.jmh" version "0.4.7"
    id "io.morethan.jmhreport" version "0.9.0"
    id "application"

    // test plugins
    id 'jacoco'

}

dependencies {
    compile project(':kmeans')
    // test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
}

/*************************/
/* Runtime Configuration */
/*************************/

mainClassName = "Main"


/**********************/
/* Test Configuration */
/**********************/

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

// task copyTestResources(type: Copy) {
//     from "${projectDir}/src/test/resources"
//     into "${buildDir}/classes/test"
// }
// processTestResources.dependsOn copyTestResources

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.2
            }
            failOnViolation true
        }
    }
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestCoverageVerification.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

/***************************/
/* Benchmark Configuration */
/***************************/


apply plugin: 'me.champeau.gradle.jmh'

jmh {
  include = 'benchmark\\.Bench.*'
    warmupIterations = 1
    iterations = 1
    resultFormat = 'JSON'
}

jmhReport {
    jmhResultPath = project.file('build/reports/jmh/results.json')
    jmhReportOutput = project.file('build/reports/jmh')
}

tasks.jmh.finalizedBy tasks.jmhReport
